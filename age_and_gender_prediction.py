# -*- coding: utf-8 -*-
"""Age-and-Gender-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DsA-XONLhZ2tHVa3jE5gEsEYCsQAOmGc
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'utkface-new:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F44109%2F78156%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240310%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240310T074323Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D72dc36329153749ab4104d08a658a68519596ad2bf23f43a10b3ad92bef4eb6620713f0d80aa401cf8658c50811d4de77bc6be92cdbfa81186d6629a8ffb6f96811a49e645a72fead503e36a224d752155de7632663fe73828f1f5d1fbfd556cb126a92eb1d4a52bd269351b680911aac01a0fd622ff6212d82066212a0828e961fa580e5c281414f4f4ffce6b945b7f27d0daa8f9f0762271f3ef842277f4c08990185876ab17580bac5432e66ea9c864444b1d16dc7b77ae881cd2f765e0b8d6b0977eeb256ec016892c05892861b5b18558bd569c7a2de0b065573f33b4cfb858e7ab745240d7955eb3f9aab9086600ab07e8047397799c09a902c1ebe7cb'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import os
import cv2
import numpy as np
import pandas as pd
from warnings import filterwarnings
filterwarnings(action="ignore")

from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import load_img, img_to_array

import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

utkface = "/kaggle/input/utkface-new"

data = {"age":[], "gender":[], "image":[]}

for dir_1 in os.listdir(utkface):
    if dir_1 == "UTKFace":
        link_1 = os.path.join(utkface, dir_1)
        for dir_2 in os.listdir(link_1):
            data["age"].append(dir_2.split("_")[0])
            data["gender"].append(dir_2.split("_")[1])
            data["image"].append(os.path.join(link_1, dir_2))
    else:
        continue


df = pd.DataFrame(data)

print(df.shape)

df.head()

gender = {0:"Male", 1:"Female"}

gender_dist = df["gender"].value_counts().plot(kind="bar")

for p in gender_dist.patches:
    h = p.get_height()
    gender_dist.text(p.get_x()+(p.get_width()/2), h, h, ha="center", va="bottom")

gender_dist.set_xlabel("Gender")
gender_dist.set_ylabel("Counts")
gender_dist.set_xticklabels(["Male", "Female"], rotation=360)
gender_dist.set_title("Gender Distribution")
plt.show()

for i in ["age", "gender"]:
    df[i] = df[i].astype("int")

df[["age", "gender"]].describe().T.style.background_gradient(cmap="coolwarm")

bins = [0, 10, 20, 30, 40, 60, 80, np.inf]
names = ['<10', '10-20', '20-30', '30-40', '40-60', '60-80', '80+']
age_binned = pd.cut(df['age'], bins, labels=names)

df["age_category"] = age_binned

binned_age_dist = df["age_category"].value_counts().plot(kind="bar")

for p in binned_age_dist.patches:
    h = p.get_height()
    binned_age_dist.text(p.get_x()+(p.get_width()/2), h, h, ha="center", va="bottom")

binned_age_dist.set_xlabel("Age")
binned_age_dist.set_ylabel("Counts")
binned_age_dist.set_title("Age Distribution")
binned_age_dist.set_xticklabels(labels=binned_age_dist.get_xticklabels(), rotation=360)
plt.show()

"""## Train Test Split"""

df["gender"] = df["gender"].astype("str")

Xtrain, Xtest = train_test_split(df, test_size=0.1)

Xtest, Xval = train_test_split(Xtest, test_size=0.1)

print(Xtrain.shape, Xtest.shape, Xval.shape)

from tensorflow.keras.applications import mobilenet, MobileNet, MobileNetV2, mobilenet_v2
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_generator = ImageDataGenerator(preprocessing_function=mobilenet.preprocess_input, horizontal_flip=True)
train_generator_age = ImageDataGenerator(preprocessing_function=mobilenet_v2.preprocess_input, horizontal_flip=True)
test_gen = ImageDataGenerator(preprocessing_function=mobilenet.preprocess_input)
test_gen_age = ImageDataGenerator(preprocessing_function=mobilenet_v2.preprocess_input)

age_datagen_train = train_generator.flow_from_dataframe(dataframe=Xtrain, x_col="image", y_col="age_category", target_size=(224, 224))
age_datagen_test = test_gen.flow_from_dataframe(dataframe=Xtest, x_col="image", y_col="age_category", target_size=(224, 224))
age_datagen_val = test_gen.flow_from_dataframe(dataframe=Xval, x_col="image", y_col="age_category", target_size=(224, 224))

gender_datagen_train = train_generator.flow_from_dataframe(dataframe=Xtrain, x_col="image", y_col="gender", target_size=(224, 224))
gender_datagen_test = test_gen.flow_from_dataframe(dataframe=Xtest, x_col="image", y_col="gender", target_size=(224, 224))
gender_datagen_val = test_gen.flow_from_dataframe(dataframe=Xval, x_col="image", y_col="gender", target_size=(224, 224))

"""## Modelling"""

from tensorflow.keras import Input

pre_trained_model = MobileNet(weights="imagenet", include_top=False, input_tensor=Input(shape=(224,224, 3)))

pre_trained_model.summary()

from tensorflow.keras import layers
from tensorflow.keras import Model
from tensorflow.keras.applications import VGG19, vgg19


mobilenetv2_model = MobileNetV2(include_top=False, weights="imagenet", input_tensor=Input(shape=(224, 224, 3)))
mobilenetv2_model.trainable = False
pretrained_model_output = mobilenetv2_model.output
x = layers.AveragePooling2D(pool_size=(2, 2))(pretrained_model_output)
x = layers.Flatten()(x)
# x = layers.Dense(units=1024, activation="relu")(x)
age_output = layers.Dense(units=7, activation="softmax", name="age_output")(x)

age_model = Model(inputs=mobilenetv2_model.input, outputs=[age_output])

age_model.summary()

from tensorflow.keras import regularizers

pretrained_model_output = pre_trained_model.output
x = layers.Flatten()(pretrained_model_output)
# x = layers.GlobalAveragePooling2D()(x)
x = layers.Dense(units=1024, activation="relu")(x)
gender_output = layers.Dense(units=2, activation="sigmoid", name="gender_output")(x)

gender_model = Model(inputs=[pre_trained_model.input], outputs=[gender_output])

gender_model.summary()

from tensorflow.keras import optimizers

gender_model.compile(optimizer=optimizers.Adam(learning_rate=1e-4),
                    loss=["categorical_crossentropy"],
                    metrics=["accuracy"])

from tensorflow.keras import callbacks

gender_model_history = gender_model.fit(gender_datagen_train,
                                        validation_data=gender_datagen_test,
                                        epochs=20,
                                        callbacks=[callbacks.ReduceLROnPlateau(patience=2),
                                                   callbacks.EarlyStopping(patience=10),
                                                   callbacks.ModelCheckpoint(filepath="/content/drive/MyDrive/model/gender.h5", save_best_only=True)])

gender_model.evaluate(gender_datagen_val)

pd.DataFrame(gender_model_history.history)[["loss", "val_loss"]].plot()

age_model.compile(optimizer=optimizers.Adam(learning_rate=1e-4),
                    loss=["categorical_crossentropy"],
                    metrics=["accuracy"])

age_model_history = age_model.fit(age_datagen_train,
                                  validation_data=age_datagen_test,
                                  epochs=20,
                                  callbacks=[callbacks.ReduceLROnPlateau(patience=2),
                                             callbacks.EarlyStopping(patience=10),
                                             callbacks.ModelCheckpoint(filepath="/content/drive/MyDrive/model/age.h5", save_best_only=True)])

age_model.evaluate(age_datagen_val)

"""## Observation:
* The models performance is bad and can be improved. I would make future adjustments as i make my research.
"""